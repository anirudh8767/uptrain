# -*- coding: utf-8 -*-
"""HousePricepredictproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-nps74-wOcu4bUJqSLGzE88qzYWKFocl

# <u><i> House Price
## Predict the House Price
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## LOADING DATASET

Predicting the house Price of the based on various factors: 
1) Location<br>
2) BHK<br>
3) Furnishing<br>
4) Sq.ft<br>
5) Old(in yrs)<br>
6) Floor
"""

df = pd.read_csv('/content/Copy of house_price.csv')
df.head()

df.shape

"""## UPDATING VALUES AND REMOVING OUTLIERS

### 1) REMOVING NULL VALUES
"""

df.isna().sum()

df.dropna(inplace=True)
df.isna().sum()

"""### 2) TRANSFORMING VARIABLES FROM OBJECT TYPE TO NUMERIC TYPE"""

df.dtypes

from sklearn.preprocessing import LabelEncoder #altering the datatype

ls = LabelEncoder()
df['Location'] = ls.fit_transform(df['Location'])

df.dtypes

df.head()

(df
 .groupby('Location')
 .Price
 .value_counts()
 .unstack()
 .fillna(0)
)

"""## 3) Checking for outliers for the input features using Boxplot and Pairplot."""

i = 1
for x in df.columns:
    plt.subplot(2,4,i)
    sns.boxplot(df[x])
    i+=1
    
plt.show()

sns.pairplot(df,x_vars=['Location','BHK','Furnishing','Sq.ft','Old(years)','Floor'],y_vars=['Price'])

"""## SPLITTING DATASET INTO TRAINING DATA AND TESTING DATA"""

#extracting x and y 
x = df.iloc[:,:-1].values
y = df.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_tr, x_te, y_tr, y_te = train_test_split(x,y,test_size=0.25)

"""## EVALUATION OF MODEL
### 1) CALCULATING MODEL SCORE
"""

def mscore(m):
    print("Training Score: ", m.score(x_tr,y_tr))
    print("Testing Score: ", m.score(x_te,y_te))

"""### 2) PREDICTING PRICE BY TEST MODEL"""

def predict_val(m,x_te):
    return m.predict(x_te)

"""### 3) CALCULATING ACCURACY OF THE MODEL"""

from sklearn.metrics import accuracy_score

def cal_acc(y_te,y_pr):
    print("\nAccuracy of the Model: ",accuracy_score(y_te,y_pr))

"""## CREATING MODELS

## 1) SVM
"""

from sklearn.svm import SVC
m1 = SVC(kernel = 'linear',random_state=0)
m1.fit(x_tr,y_tr)

from sklearn.metrics import accuracy_score,precision_score
mscore(m1)  # 1. Calculating model score
y_pr = m1.predict(x_te)
acc = accuracy_score(y_te,y_pr)
pc = precision_score(y_te,y_pr,average='weighted')
cal_acc(y_te,y_pr)
print(pc)

"""## 2) Logistic Regression"""

from sklearn.linear_model import LogisticRegression

m2 = LogisticRegression(max_iter=100000)
m2.fit(x_tr,y_tr)
mscore(m2)
y_pr =  m2.predict(x_te)
cal_acc(y_te,y_pr)

df.head()

"""# Predicting the values based on user input."""

loc = int(input('\n\tHouse Price Prediction\n  Location: (0) Bommanahalli   (1) Whitefield\nEnter Choice: '))
bhk = float(input('\nEnter bhk: '))
fur = float(input('Furnishing: (0) No   (1) Yes\nEnter Choice: '))
sqft = float(input('Sq.ft: '))
old = float(input('Old(years): '))
floor = float(input('Floor: '))

data = {'Location':[loc],'BHK':[bhk],'Furnishing':[fur],'Sq.ft':[sqft],'Old(years)':[old],'Floor':[floor]}
l=pd.DataFrame(data)
print('\nOutput Based on SVM Model Price= :',end='')
k = predict_val(m1,l)
print(k)
print('\nOutput Based on Logistic Regression Model Price= :',end='')
k = predict_val(m2,l)
print(k)
